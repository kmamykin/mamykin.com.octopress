<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Kliment Mamykin</title>
 <link href="http://mamykin.com/atom.xml" rel="self"/>
 <link href="http://mamykin.com/"/>
 <updated>2011-07-14T17:22:10-04:00</updated>
 <id>http://mamykin.com/</id>
 <author>
   <name>Kliment Mamykin</name>
   <email>kmamyk@gmail.com</email>
 </author>

 
 <entry>
   <title>Migrating from Jammit to Asset Pipeline in Rails 3.1</title>
   <link href="http://mamykin.com/2011/07/05/switching-to-assets-pipeline-from-jammit.html"/>
   <updated>2011-07-05T00:00:00-04:00</updated>
   <id>http://mamykincom/2011/07/05/switching-to-assets-pipeline-from-jammit</id>
   <content type="html">&lt;h1&gt;Migrating from Jammit to Asset Pipeline in Rails 3.1&lt;/h1&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In my &lt;a href=&quot;/2011/07/03/upgrading-to-rails31-rc4.html&quot;&gt;previous post&lt;/a&gt; I described the steps necessary to upgrade an existing application to Rails 3.1, but the post did not go into details about how to migrate an existing collection of assets (in my case packaged using Jammit/Jammit-S2 gems) to Sprockets based asset pipeline. Here we dive into the nitty gritty of the migration.&lt;/p&gt;
&lt;p&gt;My motivations for migrating to the Rails built-in asset pipeline:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Support from a larger community&lt;/li&gt;
	&lt;li&gt;Ability to use existing js/css libraries packaged as gems&lt;/li&gt;
	&lt;li&gt;Better asset versioning with MD5 and easier time with CDNs (=faster deployments, less hacks)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Update: 2011/07/14&lt;/strong&gt; &amp;#8211; currently the changes described here are sitting on a branch and are not merged to my master. The main reason is that the deployment story of the asset pipeline has its kinks that need to be worked out. Specifically deployment to heroku.com is kind of weak. For me it comes down to two issues:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Precompiling assets requires setting rake to production environment. This is more of an inconvenience or a bug, but &lt;code&gt;rake assets:precompile&lt;/code&gt; should just take the production settings and compile the assets as if they were in production. Its binary, you either compile and serve it on the fly, or serve precompiled.&lt;/li&gt;
	&lt;li&gt;In development, rails keeps serving precompiling assets instead of serving updated js/css. Precompiling the assets and adding them to git for deployment works (whatever the purists may say regarding generated artifacts under source control). But once you are back to development, you are up for a surprise. Rails will keep serving precompiled files. Wut? Now you need to start monkeying around with &lt;code&gt;git rm public/assets&lt;/code&gt;, hack, precompile, &lt;code&gt;git commit -a public/assets&lt;/code&gt;, &amp;#8230; bah.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Migration approach&lt;/h2&gt;
&lt;ol&gt;
	&lt;li&gt;Making sprockets asset pipeline work in parallel with Jammit&lt;/li&gt;
	&lt;li&gt;Shifting some weight to sprockets (make it serve jquery for example)&lt;/li&gt;
	&lt;li&gt;Adding compass and compass extensions&lt;/li&gt;
	&lt;li&gt;Migrating the rest of the assets&lt;/li&gt;
	&lt;li&gt;Deploying to Heroku, S3, CloudFront&lt;/li&gt;
	&lt;li&gt;Final cleanup&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Asset Pipeline configuration&lt;/h2&gt;
&lt;p&gt;Rails exposes app.config.assets hash during Rails initialization process. &lt;br /&gt;
You can modify the values of the config hash inside your config/application.rb or config/environments/xxx.rb.&lt;/p&gt;
&lt;p&gt;Here is the definition of the assets config hash with the defaults:&lt;br /&gt;
&lt;a href=&quot;https://github.com/rails/rails/blob/master/railties/lib/rails/application/configuration.rb&quot;&gt;$GEM_HOME/gems/railties-3.1.0.xxx/lib/rails/application/coniguration.rb&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@assets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrderedOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;precompile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /\w+\.(?!js|css).+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;application.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;application.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/assets&amp;quot;&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js_compressor&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css_compressor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The usage of app.config.assets is defined here: &lt;a href=&quot;https://github.com/rails/rails/blob/master/actionpack/lib/sprockets/railtie.rb&quot;&gt;$GEM_HOME/gems/actionpack-3.1.0.xxx/lib/sprockets/railtie.rb&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;config.assets.enabled &amp;#8211; disables the whole processing of assets. Meaning all you assets should reside and sill be served from Rails.public_path.&lt;/li&gt;
	&lt;li&gt;config.assets.path &amp;#8211; is an array of paths populated at Rails initialization process with directories where assets are located.&lt;/li&gt;
	&lt;li&gt;config.assets.precompile &amp;#8211; an array of filename patterns that will be precompiled when running &lt;code&gt;rake assets:precompile&lt;/code&gt;. If you have more then one package of js or css (e.g. application.css and mobile.css), you should &lt;code&gt;config.assets.precompile += %w( mobile.css )&lt;/code&gt; in your config/application.rb&lt;/li&gt;
	&lt;li&gt;config.prefix &amp;#8211; the path Sprockets asset pipeline will mount on to serve compiled assets. Please note that as of Rails 3.1.0.rc4 there is a bug where &lt;a href=&quot;https://github.com/rails/rails/issues/1489&quot;&gt;helpers dont respect config.assets.prefix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Making Sprockets Asset Pipeline work in parallel with Jammit&lt;/h2&gt;
&lt;ol&gt;
	&lt;li&gt;Remove Jammit pregenerated asset files: &lt;code&gt;rm -rf public/assets&lt;/code&gt;. If there are pregenerated files in /assets rails will serve those without processing your app/assets folder.&lt;/li&gt;
	&lt;li&gt;Make Jammit mount on some other path by adding &lt;code&gt;package_path: jammit&lt;/code&gt; to config/assets.yml&lt;/li&gt;
	&lt;li&gt;Enable asset pipeline with &lt;code&gt;config.assets.enabled = true&lt;/code&gt; inside config/application.rb&lt;/li&gt;
	&lt;li&gt;Copy over app/assets folder from a newly generated rails app to your app. I also renamed application.css to application.css.scss&lt;/li&gt;
	&lt;li&gt;Add new assets to your layout with &lt;code&gt;= stylesheet_link_tag 'application'&lt;/code&gt; and &lt;code&gt;= javascript_include_tag 'application'&lt;/code&gt;, before corresponding Jammit calls to &lt;code&gt;= include_stylesheets :application&lt;/code&gt; and &lt;code&gt;= include_javascripts :application&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Move images from public/images to app/assets/images. Note that the paths hardcoded in stylesheets may be broken (we will fix it later)&lt;/li&gt;
	&lt;li&gt;Restart server, most of the site should be functioning. Watch the server console output for the assets it processeing and any broken asset linkss&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tip: by default Sprockets will concatenate all your javascripts into one /assets/application.js event in development environment. This may not be ideal if you have lots of files and need debugging. Adding :debug =&amp;gt; true to the calls to include_javascript solves the issue:&lt;br /&gt;
&lt;code&gt;= javascript_include_tag 'application', :debug =&amp;gt; Rails.env.development?&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Shifting some weight to sprockets&lt;/h2&gt;
&lt;p&gt;Here we make asset pipeline serve jquery, jquery_ujs and jquery-ui javascript files that are bundled in jquery-rails gem.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Make sure your app/assets/javascripts/application.js has &lt;br /&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//= require jquery&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//= require jquery_ujs&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//= require jquery-ui&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Remove bundling of jquery.js, jquery-ui.js and rails.js (replaced by jquery_ujs.js) from config/assets.yml. If you did not bundle jquery with Jammit and used a &lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; to serve it, remove it from your layout markup.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Adding compass and compass extensions&lt;/h2&gt;
&lt;ol&gt;
	&lt;li&gt;You need to use compass gem from github for now&lt;br /&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://github.com/chriseppstein/compass.git&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails31&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;To test, add &lt;code&gt;@import &quot;blueprint/reset&quot;;&lt;/code&gt; into app/assets/stylesheets/application.css.scss, restart the server and inspect the content of /assets/application.css&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Migrating the rest of the assets&lt;/h2&gt;
&lt;h3&gt;Asset helpers&lt;/h3&gt;
&lt;p&gt;There is a lovely &lt;a href=&quot;https://github.com/rails/rails/issues/1209&quot;&gt;discussion&lt;/a&gt; going on the usage of helper functions to link assets (images/audio/fonts etc) inside your css. While some people suggested using &lt;span class=&quot;caps&quot;&gt;ERB&lt;/span&gt; preprocessing and renaming your stylesheets to application.css.scss.erb, there is a better solution. sass-rails gem to the rescue.&lt;/p&gt;
&lt;p&gt;sass-rails gem defines new helpers to use inside scss templates. From sass-rails gem &lt;span class=&quot;caps&quot;&gt;README&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;`asset_path($relative-asset-path, $asset-class)` &amp;#8211; Returns a string to the asset.&lt;br /&gt;
    For example: `asset_path(&amp;#8220;rails.png&amp;#8221;, image)` becomes `&amp;#8220;/assets/rails.png&amp;#8221;`&lt;/li&gt;
	&lt;li&gt;`asset_url($relative-asset-path, $asset-class)` &amp;#8211; Returns url reference to the asset.&lt;br /&gt;
    For example: `asset_url(&amp;#8220;rails.png&amp;#8221;, image)` becomes `url(/assets/rails.png)`&lt;/li&gt;
	&lt;li&gt;As a convenience, for each of the following asset classes there are&lt;br /&gt;
    corresponding `&lt;em&gt;path` and `&lt;em&gt;url` helpers:&lt;br /&gt;
    image, font, video, audio, javascript, stylesheet.&lt;br /&gt;
    For example: `image&lt;/em&gt;url(&amp;#8220;rails.png&amp;#8221;)` becomes `url(/assets/rails.png)` and&lt;br /&gt;
    `image&lt;/em&gt;path(&amp;#8220;rails.png&amp;#8221;)` becomes `&amp;#8220;/assets/rails.png&amp;#8221;`.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rails.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;url(&amp;quot;rails.png&amp;quot;, image)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Infortunately at the time of the this post using image-url(&amp;#8220;rails.png&amp;#8221;) returns &amp;#8220;/images/rails/png?1234534&amp;#8221; instead of &amp;#8220;/assets/rails.png&amp;#8221;, but asset_path and asset_url work as expected. &lt;a href=&quot;https://github.com/rails/sass-rails/issues/11&quot;&gt;Here&lt;/a&gt; is the bug (closed already).&lt;/p&gt;
&lt;h3&gt;Other gotchas and tips&lt;/h3&gt;
&lt;p&gt;If you are useing Sass&amp;#8217;s &lt;code&gt;@import &quot;somepartial&quot;;&lt;/code&gt; in your application.css.scss, the partial file should be named &lt;code&gt;_somepartial.css.scss&lt;/code&gt; (.css.scss ending is important), otherwise variables defined in that partial will not be visible outside of that partial, and you will get &lt;code&gt;Sass::SyntaxError: Undefined variable: &quot;$xxx&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;jQuery UI images are referenced from jQuery UI stylesheet as a relative url(&amp;#8216;images/image-xxx.png&amp;#8217;), and this link gets broken because the final stylesheet that gets served to the browser is /assets/application.css. Instead of modifying jquery ui css, I moved the images under app/assets/images/images. This allows for a drop-in jquery-ui styles replacement without modifying all internal references to images.&lt;/p&gt;
&lt;p&gt;If you are using Mongoid, you may notice that rendering a page takes forever, every image request takes a while. Apparently this is due to Mongoid preloading all models (and hittng mongod) for every request, even for an image. Adding &lt;br /&gt;
&lt;code&gt;config.mongoid.preload_models = false&lt;/code&gt;&lt;br /&gt;
in your config/environments/development.rb makes your migration much much faster. (&lt;a href=&quot;http://mongoid.org/docs/rails/railties.html&quot;&gt;Beware if you are using single collection inheritance&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;Deploying to Heroku, S3, CloudFront&lt;/h2&gt;
&lt;p&gt;Running Rails asset pipeline in development mode is recompiling css/js/images on each request, so for deployment to production you will want to precompile your assets. If a file exists under public/assets it will be served by rails without invoking the asset pipeline and recompiling the file.&lt;/p&gt;
&lt;p&gt;To compile assets rails comes with assets:precompile rake task.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bundle exec rake assets:precompile RAILS_ENV=production&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Setting production environment is important here. The result of precompilation is the public/assets folder populated with all your compiled .js and .css fiels with MD5 hash included to the name. If you use sass-rails asset helpers, the paths inside css will also be rewriten to point to the fingerprinted assets.&lt;/p&gt;
&lt;p&gt;Once the assets were precompiled its up to you how they make it to production server. You can either add them to git, and deploy like that, or upload them to S3, + change config.asset_host to point to your S3 bucket host. Gems like &lt;a href=&quot;https://github.com/moocode/asset_id&quot;&gt;asset_id&lt;/a&gt; can be helpful here.&lt;/p&gt;
&lt;p&gt;I opted to add precompiled assets to my git repo and create a CloudFront distribution with the origin server as my production server. Then you need to change config.asset_host to that distribution&amp;#8217;s domain name inside config/environments/production.rb. This removed the step of uploading files to S3, makes deployment faster (and the fewer moving parts the better).&lt;/p&gt;
&lt;p&gt;The only gotcha here is that running assets:precompile with RAILS_ENV=production loads the whole rails environment and mongoid wants to connect to the production database and fails. My config/mondoid.yml uses MONGOHQ_URL for connection, so to trick rails I just passed this env var to the rake task:&lt;br /&gt;
&lt;code&gt;bundle exec rake assets:precompile RAILS_ENV=production MONGOHQ_URL=mongodb://myuser:mypasswd&lt;/code&gt;localhost/db_development@&lt;/p&gt;
&lt;p&gt;This can be automated with a rake task&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Compile Assets&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assets&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;RAILS_ENV&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;production&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;MONGOHQ_URL&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mongodb://myuser:mypasswd@localhost/db_development&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;assets:precompile&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2&gt;Final cleanup&lt;/h2&gt;
&lt;p&gt;The final cleanup consists of removing jammit and/or jammit-s3 gems from Gemfile, &lt;code&gt;bundle install&lt;/code&gt; it, removing config/assets.yml, calls to include jammit packages from the layout markup.&lt;/p&gt;
&lt;h2&gt;References&lt;br /&gt;
&lt;a href=&quot;http://ryanbigg.com/guides/asset_pipeline.html&quot;&gt;Rails Guides Asset Pipeline&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://ryanbigg.com/2011/06/sprocket-asset-tags-internals/&quot;&gt;Sprocket asset tag internals&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.nodeta.com/2011/06/14/rails-3-1-asset-pipeline-in-the-real-world/&quot;&gt;Rails 3.1 Asset Pipeline in the Real World&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://gist.github.com/1032551&quot;&gt;Trying to get Compass working with the Rails 3.1 asset pipeline&lt;/a&gt;&lt;/h2&gt;</content>
 </entry>
 
 <entry>
   <title>Upgrading an existing app to Rails 3.1</title>
   <link href="http://mamykin.com/2011/07/03/upgrading-to-rails31-rc4.html"/>
   <updated>2011-07-03T00:00:00-04:00</updated>
   <id>http://mamykincom/2011/07/03/upgrading-to-rails31-rc4</id>
   <content type="html">&lt;h1&gt;Upgrading an existing app to Rails 3.1&lt;/h1&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This blog post documents the process of upgrading &lt;a href=&quot;http://qrio.us&quot;&gt;Qrious app&lt;/a&gt; to Rails 3.1.0.rc4. While certain errors may be application/gems specific, I hope the overall approach may be usefull to other application.&lt;/p&gt;
&lt;p&gt;The process was split into two stages&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Upgrading the rails gem, dealing and resolving gem dependencies and&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/2011/07/05/switching-to-assets-pipeline-from-jammit.html&quot;&gt;Switching to use the assets pipeline, sass/compass, deploying to heroku and Amazon S3/CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Updating Gemfile&lt;/h2&gt;
&lt;p&gt;There is more then one way to do it. And, as a helper, generate a new rails 3.1 application and refer to its Gemfile and config files for reference.&lt;/p&gt;
&lt;p&gt;The initial attempt was to simply include rails 3.1 gems in Gemfile&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&amp;#39;3.1.0.rc4&amp;#39;&lt;/span&gt;
gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;sass-rails&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;~&amp;gt; 3.1.0.rc&amp;quot;&lt;/span&gt;
gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;coffee-script&amp;#39;&lt;/span&gt;
gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;uglifier&amp;#39;&lt;/span&gt;
gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;jquery-rails&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;and update the project with &lt;code&gt;bundler update rails&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle update rails
Bundler could not find find gem activesupport &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 3.1.0.rc3, runtime&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, which is required by gem multi_json &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 1.0, runtime&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Boom! Bundler could not resolve dependencies. It seems some other gem depends on multi_json gem with too narrow constraint on the version. (I later discovered it was linkedin gem).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
Fetching &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;index &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;http://rubygems.org/
You have requested:
rails ~&amp;gt; 3.1.0.rc4

The bundle currently has rails locked at 3.0.9.
Try running &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bundle update rails&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Vicious cycle. I could have dug into the previously stable Gemfile.lock trying to manually track down the mismatched dependencies, but that did not seem like a particularly robust approach, especially since this unresolved dependency may not be the last.&lt;/p&gt;
&lt;p&gt;Anothep approach you may try, is to comment out all gems in Gemfile except rails 3.1, update rails, and then uncomment gems one by one and deal with errors.&lt;/p&gt;
&lt;p&gt;The approach that finally worked for me was to rename the gemset (you are using rvm, aren&amp;#8217;t you?) to something else for reference and create an empty gemset with the original name. Then try to install the updated Gemfile with bundle install. (Delte Gemfile.lock before this).&lt;/p&gt;
&lt;p&gt;This is a cleaner approach with a disadvantage that the other gems which had no version constraint specified in Gemfile will be installed with the latest version, and that may not be what you want. To mitigate it, take a look at your pre-3.1 Gemfile.lock and put a version constraint for the gems you dont want upgraded.&lt;/p&gt;
&lt;p&gt;Once the gems are installed, run the tests and go through the tests output and fix deprecation warnings.&lt;/p&gt;
&lt;p&gt;You can also run the app with the assets pipeline disabled to make sure nothing is broken with the gems upgrade. Inside config/application.rb put:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Disable the asset pipeline for now&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;== this is temporary&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;At theis point your application should be working as before the upgrage, with assets pipeline disabled.&lt;/p&gt;
&lt;h3&gt;Errors and Solutions&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;undefined method &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;debug_rjs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;ActionView::Base:Class
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This option was &lt;a href=&quot;https://github.com/rails/rails/commit/d8f23ca627df85b33fe8db87db5483c10b62bfe6&quot;&gt;removed in rails&lt;/a&gt; You will need to remove a reference to it from config/environments/development.rb&lt;/p&gt;
&lt;p&gt;If you are on *nix machine you may get:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;/home/kmamykin/.rvm/gems/ruby-1.9.2-p180@qrious/gems/execjs-1.2.0/lib/execjs/runtimes.rb:46:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;autodetect&lt;span class=&quot;s1&quot;&gt;&amp;#39;: Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;from /home/kmamykin/.rvm/gems/ruby-1.9.2-p180@qrious/gems/execjs-1.2.0/lib/execjs.rb:5:in `&amp;lt;module:ExecJS&amp;gt;&amp;#39;&lt;/span&gt;
from /home/kmamykin/.rvm/gems/ruby-1.9.2-p180@qrious/gems/execjs-1.2.0/lib/execjs.rb:4:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&amp;lt;top &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;from /home/kmamykin/.rvm/gems/ruby-1.9.2-p180@qrious/gems/coffee-script-2.2.0/lib/coffee_script.rb:1:in `require&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;In this case you need to install one of JavaScript runtimes, for example Node.js with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install nodejs&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Updating config files&lt;/h2&gt;
&lt;p&gt;Right now is a good time to generate a new rails 3.1 application and compare/diff the generated files under config folder with your application.&lt;/p&gt;
&lt;p&gt;For my application I had to do the following changes:&lt;/p&gt;
&lt;p&gt;Replaced config/boot.rb with the one generated by rails 3.1&lt;/p&gt;
&lt;p&gt;In config/application.rb added the following line.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Enable the asset pipeline&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;In config/environments/development.rb removed the following line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_rjs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Copy over config/initializers/wrap_parametes.rb&lt;/p&gt;
&lt;p&gt;Added the following lines to config/environments/development.rb&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Do not compress assets&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Added the following lines to config/encironments/test.rb&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Configure static asset server for tests with Cache-Control for performance&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve_static_assets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_cache_control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;public, max-age=3600&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Added the following lines to config/environments/production.rb.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Compress JavaScripts and CSS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Compress both stylesheets and JavaScripts&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js_compressor&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:uglifier&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css_compressor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:scss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2&gt;Additional notes&lt;/h2&gt;
&lt;p&gt;Currently rails 3.1.0.rc4 requires JavaScript runtime installed even on production systems, which is clearly wrong and &lt;a href=&quot;http://yehudakatz.com/2011/06/14/what-the-hell-is-happening-to-rails/&quot;&gt;will be removed&lt;/a&gt; before final release. For now, for heroku deployments, the fix is available &lt;a href=&quot;http://stackoverflow.com/questions/6075961/problem-deploying-rails-3-1-project-to-heroku-could-not-find-a-javascript-runtim&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How to install vim's Janus plugin distro on Windows</title>
   <link href="http://mamykin.com/2011/06/28/vim-janus-on-windows.html"/>
   <updated>2011-06-28T00:00:00-04:00</updated>
   <id>http://mamykincom/2011/06/28/vim-janus-on-windows</id>
   <content type="html">&lt;h1&gt;How to install vim&amp;#8217;s Janus plugin distro on Windows&lt;/h1&gt;
&lt;p&gt;I have been trying to exercise my vim muscle on Window &lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, which you can certainly do with &lt;a href=&quot;http://www.vim.org/download.php#pc&quot;&gt;gVim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Mac/Ubuntu I have been using now quite popular &lt;a href=&quot;https://github.com/carlhuda/janus&quot;&gt;Janus&lt;/a&gt; plugin collection, but its installation on Windows is not supported quite well. Luckily, &lt;a href=&quot;http://wherethebitsroam.com/content/who-am-i&quot;&gt;Jeff Williams&lt;/a&gt; wrote a post how to beat Janus down to submission: &lt;a href=&quot;http://wherethebitsroam.com/blogs/jeffw/gvim-janus-windows&quot;&gt;gVim + Janus on Windows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have implemented Jeff&amp;#8217;s changes on this &lt;a href=&quot;https://github.com/kmamykin/janus/tree/windows-patches&quot;&gt;branch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is work in progress, it would be nice to fix Commant-t plugin (which requires native compile) and ultimately fix Janus to support Windows out of the box, instead of this hack.&lt;/p&gt;
&lt;h3&gt;Side notes:&lt;/h3&gt;
&lt;p id=&quot;fn1&quot;&gt;No apologies for using Windows :) Use the best tool for the job, and some jobs require it.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How to render a Rails 3 view in a rake task</title>
   <link href="http://mamykin.com/2011/06/28/how-to-render-view-from-rake.html"/>
   <updated>2011-06-28T00:00:00-04:00</updated>
   <id>http://mamykincom/2011/06/28/how-to-render-view-from-rake</id>
   <content type="html">&lt;h1&gt;How to render a Rails 3 view in a rake task&lt;/h1&gt;
&lt;p&gt;Recently I needed to render a Haml view into &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; from a rake task. Information on how to do that is kind of sparse for Rails 3.&lt;/p&gt;
&lt;p&gt;Googling turned out a few posts with slightly different variations on the solution, but most of them either a bit bloated, not working or using deprecated apis. You can read up on them: &lt;a href=&quot;http://jguimont.com/post/5582583230/how-to-render-a-full-page-template-in-a-rake-task-with&quot;&gt;here&lt;/a&gt; , &lt;a href=&quot;http://snippets.aktagon.com/snippets/517-How-to-render-a-view-or-partial-from-a-Rake-task-model-or-anywhere&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/questions/3752454/rails-3-rendering-views-in-rake-task&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;http://stackoverflow.com/questions/4262044/rails-3-how-to-render-erb-template-in-rake-task&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1050726.js&quot;&gt; &lt;/script&gt;</content>
 </entry>
 
 <entry>
   <title>How to deploy Jekyll blog to a shared host</title>
   <link href="http://mamykin.com/2011/06/27/deploying-jekyll-blog-on-shared-host.html"/>
   <updated>2011-06-27T00:00:00-04:00</updated>
   <id>http://mamykincom/2011/06/27/deploying-jekyll-blog-on-shared-host</id>
   <content type="html">&lt;h1&gt;How to deploy Jekyll blog to a shared host&lt;/h1&gt;
&lt;p&gt;I have converted my blog at &lt;a href=&quot;http://mamykin.com&quot;&gt;mamykin.com&lt;/a&gt; to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; (which is an awesomely simple and elegant piece of software).&lt;/p&gt;
&lt;p&gt;However deploying the converted blog to a shared hosting server proved to be a bit of a difficulty.&lt;/p&gt;
&lt;p&gt;The docs on Jekyl advise to add a git post-receive hook on the server, which clones your git repo, runs jekyll on the server and copies generated site (_site directory) to the final location served by the server. See &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Deployment&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The problematic part is that Jekyll (and Python + Pygments) needs to be installed on the server in order to generate the site. This is always a hastle on shared hosting, since you are most likely in a sandboxed environment without root access. I figured out how to install jekyll gem  + RedCloth under my user account, but installing Pygments failed. Apparently my shared host server is not configured for a sandboxed Python installs :(&lt;/p&gt;
&lt;p&gt;My solution is to generate the site and add it to git on the client with pre-commit git hook.&lt;/p&gt;
&lt;p&gt;Below is my modified deploy instructions for a shared host.&lt;/p&gt;
&lt;h2&gt;Setup remote git repo&lt;/h2&gt;
&lt;p&gt;Here we create a bare git repository and a directory for the website.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;laptop&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh deployer@myserver.com
server&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir myrepo.git
server&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myrepo.git
server&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git --bare init
server&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cp hooks/post-receive.sample hooks/post-receive
server&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir ~/myrepo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Add the following to ~/myrepo.git/hooks/post-receive&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;GIT_REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/myrepo.git
&lt;span class=&quot;nv&quot;&gt;PUBLIC_WWW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/myrepo

rm -Rf &lt;span class=&quot;nv&quot;&gt;$PUBLIC_WWW&lt;/span&gt;/*
git clone &lt;span class=&quot;nv&quot;&gt;$GIT_REPO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PUBLIC_WWW&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Most shared host have a directory (or symbolic link) in user&amp;#8217;s home folder to point to the dir served by the webserver. Here we override it to point to the _site directory of the checked out blog.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mv ~/public_html ~/public_html.bak
ln -s ~/myrepo/_site ~/public_html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2&gt;Setup local git repo&lt;/h2&gt;
&lt;p&gt;On your workstation add a pre-commit hook to generate the site and add modified files to git.&lt;/p&gt;
&lt;p&gt;Inside .git/hooks/pre-commit:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Creating site with jekyll&amp;quot;&lt;/span&gt;
jekyll
git add -v -f _site
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Note: -f flag when adding _site files is necessary because I have _site directory ignored in .gitignore&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git remote add deploy deployer@myserver.com:~/myrepo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h2&gt;Deploy with a push&lt;/h2&gt;
&lt;p&gt;The only thing left to do is to push you local repository to the server with git push deploy master,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git push deploy master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;and verify the site is served correctly.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Synology 209 NAS Server performance testing</title>
   <link href="http://mamykin.com/2010/09/01/synology-209-nas-server-performance-testing.html"/>
   <updated>2010-09-01T00:00:00-04:00</updated>
   <id>http://mamykincom/2010/09/01/synology-209-nas-server-performance-testing</id>
   <content type="html">&lt;h1&gt;Synology 209 &lt;span class=&quot;caps&quot;&gt;NAS&lt;/span&gt; Server performance testing&lt;/h1&gt;
&lt;p&gt;I have recently purchased Synology 209 &lt;span class=&quot;caps&quot;&gt;NAS&lt;/span&gt; server which got a lot of good reviews on newegg.com.&lt;/p&gt;
&lt;p&gt;Before I committed to this particular piece of hardware, I spend some time researching which particular model to choose (210j &amp;#8211; newer but slower &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; or 209 &amp;#8211; with a bit beefier &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt;), which drives to pick (&lt;span class=&quot;caps&quot;&gt;RPM&lt;/span&gt;, cache size, etc).  I ended up buying 209 model with 2 Western Digital Green Caviar 1.5TB 5400RPM 64M cache drives.&lt;/p&gt;
&lt;p&gt;When the package arrived, giggling like a kid on Christmas, I opened it up, install the drives, booted and configured it according to the instructions. Now it is time to back something up!  (and I had a lot of files sprinkled around on my mulitple laptops and desktops).&lt;/p&gt;
&lt;p&gt;But I was quickly deflated when I was trying to copy 160G of raw DV video from my Ubunty box.  The initial attempt was using &lt;span class=&quot;caps&quot;&gt;CIFS&lt;/span&gt; share from my nas mounted on the linux box. I was getting ~5MB/s throughput! That&amp;#8217;s it? &lt;span class=&quot;caps&quot;&gt;WTF&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;I decited to do a little troubleshooting.&lt;/p&gt;
&lt;h2&gt;Test networking setup and throughput&lt;/h2&gt;
&lt;p&gt;Everything here was attached to a cheap gigabit switch &lt;link from newegg&gt;.  Just to make sure the connection was not operating in 100M mode (which may happen depending on &lt;span class=&quot;caps&quot;&gt;NIC&lt;/span&gt; config, cabling, etc).&lt;/p&gt;
&lt;p&gt;The goal here is install one of the network throughput benchmarking tools on both ubuntu box and Synology &lt;span class=&quot;caps&quot;&gt;NAS&lt;/span&gt;, we will use iperf &lt;link&gt; in this case.&lt;/p&gt;
&lt;h3&gt;Install iperf&lt;/h3&gt;
&lt;p&gt;Enable &lt;span class=&quot;caps&quot;&gt;SSH&lt;/span&gt; access to your &lt;span class=&quot;caps&quot;&gt;NAS&lt;/span&gt; server using its management site. http://nas1:5000/ Login as root to the console (You will be asked for the password):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ssh root@nas1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Install ipkg tool (which allows you to install other precompiled packages on your &lt;span class=&quot;caps&quot;&gt;NAS&lt;/span&gt;). Instructions are found here &lt;link&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ipkg update
ipkg install iperf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;If on Ubuntu:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo apt-get install iperf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;If on Mac:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo port install iperf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3&gt;Performing test&lt;/h3&gt;
&lt;p&gt;on nas1&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;iperf -s 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;/images/iperf-nas.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;On my Mac:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;iperf -c nas1 -f M
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;/images/iperf-mac.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Overall throughput is around 70 MB/s, which is not stellar (the theoretical max on a Gigabit Ethernet is 125 MB/s) but respectable. I dont have jumbo frames configured &lt;link&gt;.&lt;/p&gt;
&lt;h2&gt;Copying photos over &lt;span class=&quot;caps&quot;&gt;CIFS&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;While connecting to the \\has1\photos I notices strange &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; utilization on nas1, &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; was pegged at 100% by two processed: convert and ffmpeg. Ahhhh! Seems like Synology&amp;#8217;s Picture Sharing functionality was converting images on the fly generating thumbs, pegging &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt;, and making it a bottleneck to the overall throughput of the system. At least I am glad I bought 209 model and not 210j with slower &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I disable the Photo Sharing functionality through the web management interface, and killed all running convert and ffmpeg processes.  Those processed kept spawning up, so to figure out which process was responsible I installed htop (#ipkg install htop), displayed proecessed in tree view&lt;/p&gt;
&lt;p&gt;Repeating the test with one 4G file timing the copy operation to an &lt;span class=&quot;caps&quot;&gt;SMB&lt;/span&gt; mounted share on Mac:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/smb-nas.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/smb-mac.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Using Mac file share (&lt;span class=&quot;caps&quot;&gt;APF&lt;/span&gt; Protocol)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/afpd-nas.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/afpd-mac.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;Synology 209 &lt;span class=&quot;caps&quot;&gt;NAS&lt;/span&gt; server is a budget priced &lt;span class=&quot;caps&quot;&gt;NAS&lt;/span&gt; server and as such it comes with limitation: namely the performance of the system is often &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; bound.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;When copying initial files to &lt;span class=&quot;caps&quot;&gt;NAS&lt;/span&gt;, make sure to disable all services that may cause &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; load, such as image thumbnail generation (See admin guide)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;Avoid using transfer protocols that involve &lt;span class=&quot;caps&quot;&gt;SSH&lt;/span&gt; keys (expensive &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; operation on Synology).&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;The fastest bulk copy method I discovered was &lt;span class=&quot;caps&quot;&gt;FTP&lt;/span&gt; with multiple simultaneous file uploads.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>My favorite git log formatting</title>
   <link href="http://mamykin.com/2010/03/28/favorite-git-log-formatting.html"/>
   <updated>2010-03-28T00:00:00-04:00</updated>
   <id>http://mamykincom/2010/03/28/favorite-git-log-formatting</id>
   <content type="html">&lt;h1&gt;My favorite git log formatting&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git log --graph --pretty&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s2&quot;&gt;&amp;quot;%Creset%h %aN %Cred%d %Cblue%s&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;or create an alias in your ~/.bash_profile&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;git log --graph --pretty=format:&amp;quot;%Creset%h %aN %Cred%d %Cblue%s&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;/images/git_log_output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;For a small project where you have just a few collaborators you may consider replacing the author name with the initials to save space. .mailmap file to the rescue! (see git shortlog &amp;#8212;help for the structure of the file).&lt;br /&gt;
Create .mailmap file at the root of the git repository:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HS &amp;lt;homer@simpsons.tv&amp;gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; .mailmap
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;and the output of gl alias is much nicer. Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;br /&gt;
I came across &lt;a href=&quot;http://www.jukie.net/bart/blog/pimping-out-git-log&quot;&gt;Bart&amp;#8217;s Blog&lt;/a&gt; post with a bit more &lt;br /&gt;
elaborate (and prettier to my eyes) format. Bart also shows how you can setup git alias (as oppose to bash alias)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git config --global alias.lg &lt;span class=&quot;s2&quot;&gt;&amp;quot;log --graph --pretty=format:&amp;#39;%Creset%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit --date=relative&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;To use the alias do&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git gl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Pause/sleep substitude in DOS batch file</title>
   <link href="http://mamykin.com/2009/08/18/pause-sleep-substitute-in-dos-batch-file.html"/>
   <updated>2009-08-18T00:00:00-04:00</updated>
   <id>http://mamykincom/2009/08/18/pause-sleep-substitute-in-dos-batch-file</id>
   <content type="html">&lt;h1&gt;Pause/sleep substitude in &lt;span class=&quot;caps&quot;&gt;DOS&lt;/span&gt; batch file&lt;/h1&gt;
&lt;p&gt;It is beyond me why Windows batch files don&amp;#8217;t have a built in sleep command.&lt;/p&gt;
&lt;p&gt;I know it is a part of the Windows Resource Kit, but when installing&lt;br /&gt;
extra pack is not an option, you can always resort &lt;a href=&quot;http://malektips.com/dos0017.html&quot;&gt;to using ping&lt;/a&gt; as a poor man&amp;#8217;s substitute for sleep.&lt;/p&gt;
&lt;p&gt;For example this command will effectively sleep for 15 seconds:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;ping &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -w &lt;span class=&quot;m&quot;&gt;15000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NUL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>How to build Sun JDK 1.6 from source on Windows</title>
   <link href="http://mamykin.com/2009/08/12/how-to-build-sun-jdk-1.6-from-source-on-windows.html"/>
   <updated>2009-08-12T00:00:00-04:00</updated>
   <id>http://mamykincom/2009/08/12/how-to-build-sun-jdk-1.6-from-source-on-windows</id>
   <content type="html">&lt;h1&gt;How to build Sun &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt; 1.6 from source on Windows&lt;/h1&gt;
&lt;p&gt;This walkthrough is meant to be an additional information resource with clarifications and tips on how to build the Sun&amp;#8217;s &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt; 1.6 on Windows. It is not an all encompusing guide on the build, please read the official build instructions page here. However the official build instructions are sometimes unclear on certain things, or just not as up to date, and it took me awhile to google through all the errors. Hopefully you will be able to avoid the same pitfalls by following this walk through.&lt;/p&gt;
&lt;p&gt;Initial reading:&lt;br /&gt;
&lt;a href=&quot;http://download.java.net/jdk6/source/&quot;&gt;Download &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt; 1.6 source&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://download.java.net/jdk6/6u15/promoted/b03/docs/build/README-builds.html&quot;&gt;Official build instructions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This guide has been tested with &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt; 1.6u15 on Windows XP, with &lt;span class=&quot;caps&quot;&gt;CYGWIN&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;What you will need:&lt;br /&gt;
Download &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt; source jar from the link above. The file is called: jdk-6u15-fcs-src-b03-jrl-02_jul_2009.jar&lt;br /&gt;
Download &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt; source binaries jar from the link above: File: jdk-6u15-fcs-bin-b03-jrl-02_jul_2009.jar&lt;br /&gt;
I also downloaded Mozilla Binaries for Windows but I dont think it is necessary.&lt;/p&gt;
&lt;p&gt;1) Unarchive the source and the source binaries into &lt;b&gt;&lt;strong&gt;the same&lt;/strong&gt;&lt;/b&gt; directory.&lt;br /&gt;
Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;java -jar jdk&lt;span class=&quot;m&quot;&gt;-6&lt;/span&gt;u&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;-fcs-src-b&lt;span class=&quot;m&quot;&gt;03&lt;/span&gt;-jrl&lt;span class=&quot;m&quot;&gt;-02&lt;/span&gt;_jul_&lt;span class=&quot;m&quot;&gt;2009&lt;/span&gt;.jar
java -jar jdk&lt;span class=&quot;m&quot;&gt;-6&lt;/span&gt;u&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;-fcs-bin-b&lt;span class=&quot;m&quot;&gt;03&lt;/span&gt;-jrl&lt;span class=&quot;m&quot;&gt;-02&lt;/span&gt;_jul_&lt;span class=&quot;m&quot;&gt;2009&lt;/span&gt;.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Pick the same destination directory for both, in this walk through I will use C:\Misc\jdk6build\workspace&lt;/p&gt;
&lt;p&gt;2) Install &lt;span class=&quot;caps&quot;&gt;CYGWIN&lt;/span&gt; if you don&amp;#8217;t already have it. Even if you do, you may want to rerun cygwin&amp;#8217;s setup.exe and make sure you have all development tools installed from Devel category.&lt;/p&gt;
&lt;p&gt;3) Downgrade CYGWIN&amp;#8217;s make utility to v3.80&lt;br /&gt;
Currently cygwin includes make v3.81, which discontinued its support for paths in C:/path/path/path format. However the &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt; build make files rely heavily on this path format. You can get and compile make v3.80 from source or goggle the web for a precompiled binaries.&lt;br /&gt;
&lt;insert link to download precompiled binary&gt;&lt;/p&gt;
&lt;p&gt;Validate from cmd:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; -version
GNU Make &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;3) Install Bootstrap &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Even though the build instructions specify it should be a 1.5 &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt;, you really need 1.6 &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt;, or you will get an error during dev-sanity target. If you already have 1.6 &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt; installed you can use that install.&lt;/p&gt;
&lt;p&gt;4) Install Microsoft DirectX &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;There is nothing special about this install (see build instructions for the &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;), download, install it and remember the path to the install. Something like C:\Program Files\Microsoft DirectX 9.0 &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt; (Summer 2004)&lt;/p&gt;
&lt;p&gt;5) Open up a windows command line prompt (cmd).&lt;/p&gt;
&lt;p&gt;It looks like the build system needs to be invoked from windows command line, not cygwin shell, which was a suprprise to me. I did not realize it was possible to call cygwin utilities from dos command line, I always used bat shell&amp;#8230; anyway, back to cmd:&lt;/p&gt;
&lt;p&gt;Double check your &lt;span class=&quot;caps&quot;&gt;PATH&lt;/span&gt; environment variable. What you want is the cygwin path to be after the path to VS2003 binaries, otherwise at some point in the build you will get an error about inability to determine linker&amp;#8217;s version. It is because some make file calls &amp;#8220;link&amp;#8221; command which resolves to cygwin&amp;#8217;s link, not VS2003. I would actually advise you to reset it clean, to get rid off (in my case for example from UnxUtils in the path) other settings that may interfer.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;&lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%SystemRoot%&lt;/span&gt;\system&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;;c:\cygwin\bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;6) Setup VS2003 environment variables:&lt;/p&gt;
&lt;p&gt;Run vsvars32.bat for VS2003:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace&amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\Program Files\Microsoft Visual Studio .NET 2003\Common7\Tools\vsvars32.bat&amp;quot;&lt;/span&gt;
Setting environment &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; using Microsoft Visual Studio .NET &lt;span class=&quot;m&quot;&gt;2003&lt;/span&gt; tools.
(&lt;span class=&quot;k&quot;&gt;If&lt;/span&gt; you have another version of Visual Studio or Visual C++ installed and wish
to use its tools from the command line&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; run vcvars&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;.bat &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; that version.)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Validate by running cl and link. Both should print Microsoft copyright.&lt;/p&gt;
&lt;p&gt;7) Set necessary environment variables&lt;/p&gt;
&lt;p&gt;I was able to get by by setting just ALT_BOOTDIR and ALT_DXSDK_PATH, you might need to set more variables, see the official build instructions for the full list.&lt;/p&gt;
&lt;p&gt;The trick here is that the variables need to be set in cygwin&amp;#8217;s &amp;#8220;mixed&amp;#8221; path format, C:/&lt;span class=&quot;caps&quot;&gt;DIRECTO&lt;/span&gt;~/&lt;span class=&quot;caps&quot;&gt;SUBDIREC&lt;/span&gt;~/file, which can be calculated using cygpath -s -m &amp;quot;&amp;quot;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cygpath&lt;/span&gt; -s -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;C:\Program Files\Microsoft DirectX 9.0 SDK (Summer 2004)&amp;quot;&lt;/span&gt;
C:&lt;span class=&quot;n&quot;&gt;/PROGRA~1/MICROS~1.0SD&lt;/span&gt;
C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; ALT_DXSDK_PATH&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C:&lt;span class=&quot;n&quot;&gt;/PROGRA~1/MICROS~1.0SD&lt;/span&gt;
C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cygpath&lt;/span&gt; -s -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;C:\Program Files\Java\jdk1.6.0_15&amp;quot;&lt;/span&gt;
C:&lt;span class=&quot;n&quot;&gt;/PROGRA~1/Java/JDK16~4.0_1&lt;/span&gt;
C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; ALT_BOOTDIR&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C:&lt;span class=&quot;n&quot;&gt;/PROGRA~1/Java/JDK16~4.0_1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;8 ) Run dev-sanity target and fix all warnings/errors&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; control\make
C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace\control\make&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; dev-sanity ARCH_DATA_MODEL&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;In my case I had to unset &lt;span class=&quot;caps&quot;&gt;CLASSPATH&lt;/span&gt; and JAVA_HOME env variables.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace\control\make&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; CLASSPATH&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace\control\make&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; JAVA_HOME&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;9) Finally kick off the build and go get yourself a nice beverage, you will be staring at it for a while:)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;C:\Misc\jdk&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;build\workspace\control\make&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; dev ARCH_DATA_MODEL&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
 </entry>
 
 
</feed>
